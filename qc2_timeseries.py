# -*- coding: utf-8 -*-
"""CRG-QC2-timeseries.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VMb8pW8vSxaK8mYz2hSUqsjkVhUFTQKE

## Load Dependencies and Data
"""

import os
import re

import pandas as pd
from mzqc import MZQCFile as qc
import datetime as dt

import panel as pn
import matplotlib.pyplot as plt
from matplotlib.figure import Figure
pn.extension('ipywidgets','tabulator')

# mzqc_basepath = "/content/drive/Shareddrives/mzqclib-manuscript/test data/CRG"
mzqc_basepath = "mzqcs"
dataset_mid_path = {"Lumos_2017": "PXD019888",
"Velos_2018": "PXD019889",
"Lumos_2018": "PXD019891",
"Velos_2017": "PXD019892"}
metadata_paths = {k: os.path.join(os.path.join(mzqc_basepath, v), "metadata_"+k+".json") for k,v in dataset_mid_path.items()}
mzqc_paths = {k: [os.path.join(os.path.join(mzqc_basepath, v), x) for x in os.listdir(os.path.join(mzqc_basepath, v)) if x.endswith(".mzqc")] for k,v in dataset_mid_path.items()}

"""## Consider all runs in a panel"""

mzqc_objs = dict()
for mzqc_path in mzqc_paths["Lumos_2017"]:
  with open(mzqc_path, "r") as file:
    mzqcobj = qc.JsonSerialisable.FromJson(file)
    mzqc_objs[os.path.basename(mzqc_path)] = mzqcobj

df = pd.DataFrame([{'Date': next(iter([pd.to_datetime(cd.value) for cd in rowrunmzqc.runQualities[0].metadata.inputFiles[0].fileProperties if cd.accession=="MS:1000747"])),
                    '# MS1': next(iter([cd.value for cd in rowrunmzqc.runQualities[0].qualityMetrics if cd.accession=="MS:4000059"])),
                    '# MS2': next(iter([cd.value for cd in rowrunmzqc.runQualities[0].qualityMetrics if cd.accession=="MS:4000060"])),
                    '# ID MS2': next(iter([cd.value for cd in rowrunmzqc.runQualities[0].qualityMetrics if cd.accession=="MS:1003251"])),
                    '# Peptidoforms': next(iter([cd.value for cd in rowrunmzqc.runQualities[0].qualityMetrics if cd.accession=="MS:1003250"])),
                    '# Proteoforms': next(iter([cd.value for cd in rowrunmzqc.runQualities[0].qualityMetrics if cd.accession=="MS:1003328"])),
                    '# Proteins': next(iter([cd.value for cd in rowrunmzqc.runQualities[0].qualityMetrics if cd.accession=="MS:1002404"])),
                    '# Features': next(iter([cd.value for cd in rowrunmzqc.runQualities[0].qualityMetrics if cd.accession=="MS:4000102"])),
                    '# ID Features': next(iter([cd.value for cd in rowrunmzqc.runQualities[0].qualityMetrics if cd.accession=="MS:4000103"])),
                    u'# Signal fluct. ↑': next(iter([cd.value for cd in rowrunmzqc.runQualities[0].qualityMetrics if cd.accession=="MS:4000097"])),
                    u'# Signal fluct. ↓': next(iter([cd.value for cd in rowrunmzqc.runQualities[0].qualityMetrics if cd.accession=="MS:4000098"])),
                    'RT range': str(next(iter([cd.value for cd in rowrunmzqc.runQualities[0].qualityMetrics if cd.accession=="MS:4000070"]))),
                    'MZ range': str(next(iter([cd.value for cd in rowrunmzqc.runQualities[0].qualityMetrics if cd.accession=="MS:4000069"]))),
                    'mzrange': next(iter([cd.value for cd in rowrunmzqc.runQualities[0].qualityMetrics if cd.accession=="MS:4000069"])),
                    'Name':rowrunname,
                    } for rowrunname, rowrunmzqc in mzqc_objs.items()])

df.Date = df.Date.dt.date

df_widget_max_select = 6
df_widget_plotted_selection = list()
df_widget = pn.widgets.Tabulator(value=df, selectable='checkbox',
                                 show_index=False,
                                 pagination='local', page_size=10,
                                 disabled=True,
                                 hidden_columns=["Name",'mzrange'])
df_widget.selectable=df_widget_max_select

def plot_tics(df_widget):
  fig0 = Figure(figsize=(6, 4))
  ax = fig0.subplots()

  selection_names = df_widget.value.iloc[df_widget.selection].Name
  selection_dates = df_widget.value.iloc[df_widget.selection].Date
  selection_tics = [pd.DataFrame(next(iter([m.value for m in mzqc_objs.get(n).runQualities[0].qualityMetrics if m.accession=="MS:4000104"]))) for n in selection_names]
  selection_tics = [tic.assign(**{"Date":str(d), "Name":n}) for n,d,tic in zip(selection_names,selection_dates,selection_tics)]

  if len(selection_tics)==0:
    # TODO select up to df_widget_max_select rows/QC2 runs
    return fig0

  tics_df =  pd.pivot(pd.concat(selection_tics), index="MS:1000894", columns="Date", values="MS:1000285")
  ax = tics_df.interpolate(method='linear').plot.line(legend=True, linewidth=0.5, ax=ax)
  ax.set_xlabel("Retentiontime [s]")
  ax.set_ylabel("Relative Intensity of Ion Current")
  ax.set_title("Total Ion Chromatogramm")
  return fig0

tics_pane = pn.pane.Matplotlib(plot_tics(df_widget), dpi=250)

def plot_runsticker(df_widget):
  if len(df_widget.selection)==0:
    fig0 = Figure(figsize=(6, 4))
    axs = fig0.subplots(2,2)
    # TODO select up to df_widget_max_select rows/QC2 runs
    return fig0

  selection_df = df_widget.value.iloc[df_widget.selection]
  fig0 = Figure(figsize=(6, 4))
  axs = fig0.subplots(2,2)

  idax = selection_df[['# MS1','# MS2', '# ID MS2', 'Date']].set_index('Date').plot.barh(ax=axs[0,0])
  qaax = selection_df[['# Features','# ID Features', 'Date']].set_index('Date').plot.barh(ax=axs[1,0])
  # mzax = pd.pivot(selection_df[['mzrange', 'Date']].explode('mzrange', ignore_index=True), columns="Date", values="mzrange").plot.line()
  mzax = pd.pivot(selection_df[['mzrange', 'Date']]\
          .reset_index().rename(columns={'index':'xpos'})\
          .explode('mzrange', ignore_index=True).reset_index(), index=["index","xpos"]\
          , columns="Date", values="mzrange").reset_index(level=("xpos",))\
          .plot.line(x="xpos",ax=axs[0,1])
  mzax.get_xaxis().set_visible(False)
  flax = selection_df[['# Signal fluct. ↓', '# Signal fluct. ↑', 'Date']]\
          .set_index('Date').astype('int').plot.bar(rot=45,ax=axs[1,1])

  # axs[0, 0] = idax
  axs[0, 0].set_title("Identification Base")
  # axs[1, 0] = qaax
  axs[1, 0].set_title("Quantitation Base")
  # axs[1, 0].sharex(axs[0, 0])
  # axs[0, 1] = mzax
  axs[0, 1].set_title("Observed m/z Range")
  # axs[1, 1] = flax
  axs[1, 1].set_title("Signal Fluctuations")
  fig0.tight_layout()

  return fig0

runsticker_pane = pn.pane.Matplotlib(plot_runsticker(df_widget), dpi=250)

row1 = pn.Row('## Row1', tics_pane, runsticker_pane, styles=dict(background='WhiteSmoke'))
row2 = pn.Row('## Row2', df_widget, styles=dict(background='WhiteSmoke'))
col = pn.Column('# Column', row1, row2)
col.servable()

def update_selection_plots(event):
  print(event)
  global col
  global df_widget
  global df_widget_plotted_selection
  if df_widget_plotted_selection == df_widget.selection:
    return
  else:
    df_widget_plotted_selection = df_widget.selection
    col[1][1] = pn.pane.Matplotlib(plot_tics(df_widget), dpi=250)
    col[1][2] = pn.pane.Matplotlib(plot_runsticker(df_widget), dpi=250)
    return

# df_widget.selection.append(1)
# update_selection_plots(df_widget)
df_widget.on_click(callback=update_selection_plots)

# !python /home/vscode/.local/bin/panel serve crg_qc2_timeseries.py